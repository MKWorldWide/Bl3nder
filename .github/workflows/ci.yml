name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  BUILD_TYPE: Release
  WITH_TESTS: ON
  WITH_DOCS: ON

jobs:
  # Build and test on multiple platforms
  build-linux:
    name: Build and Test (Linux)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        compiler: [gcc-9, gcc-10, clang-10]
        python-version: [3.10, 3.11]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake git
        sudo apt-get install -y libboost-all-dev libeigen3-dev libopenexr-dev
        sudo apt-get install -y ${{ matrix.compiler }}
        
    - name: Download libraries
      run: ./download_libs.sh
        
    - name: Configure CMake
      run: |
        mkdir build && cd build
        cmake .. \
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
          -DWITH_TESTS=${{ env.WITH_TESTS }} \
          -DWITH_DOCS=${{ env.WITH_DOCS }} \
          -DCMAKE_CXX_COMPILER=${{ matrix.compiler }}
          
    - name: Build
      run: |
        cd build
        make -j$(nproc)
        
    - name: Run tests
      run: |
        cd build
        make test
        
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-linux-${{ matrix.compiler }}-py${{ matrix.python-version }}
        path: build/Testing/
        
  build-macos:
    name: Build and Test (macOS)
    runs-on: macos-latest
    strategy:
      matrix:
        python-version: [3.10, 3.11]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        brew install cmake boost eigen openexr
        
    - name: Download libraries
      run: ./download_libs.sh
        
    - name: Configure and build
      run: |
        mkdir build && cd build
        cmake .. \
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
          -DWITH_TESTS=${{ env.WITH_TESTS }} \
          -DWITH_DOCS=${{ env.WITH_DOCS }}
        make -j$(sysctl -n hw.ncpu)
        
    - name: Run tests
      run: |
        cd build
        make test
        
  build-windows:
    name: Build and Test (Windows)
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: [3.10, 3.11]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Download libraries
      run: ./download_libs.sh
        
    - name: Configure and build
      run: |
        mkdir build
        cd build
        cmake .. -G "Visual Studio 16 2019" -A x64 \
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
          -DWITH_TESTS=${{ env.WITH_TESTS }} \
          -DWITH_DOCS=${{ env.WITH_DOCS }}
        cmake --build . --config ${{ env.BUILD_TYPE }} --parallel
        
    - name: Run tests
      run: |
        cd build
        ctest -C ${{ env.BUILD_TYPE }}
        
  # Code quality checks
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.10
        
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y clang-format clang-tidy
        
    - name: Check code formatting
      run: |
        find source/ -name "*.cpp" -o -name "*.h" -o -name "*.cc" -o -name "*.hh" | \
        xargs clang-format --dry-run --Werror
        
    - name: Run clang-tidy
      run: |
        mkdir build && cd build
        cmake .. -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
        run-clang-tidy -j$(nproc) -header-filter='.*' -checks='-*,readability-*'
        
    - name: Python linting
      run: |
        pip install flake8 black mypy
        find . -name "*.py" -not -path "./build/*" -not -path "./extern/*" | xargs flake8
        find . -name "*.py" -not -path "./build/*" -not -path="./extern/*" | xargs black --check
        find . -name "*.py" -not -path "./build/*" -not -path="./extern/*" | xargs mypy
        
  # Documentation checks
  docs-check:
    name: Documentation Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check documentation links
      run: |
        pip install markdown-link-check
        find docs/ -name "*.md" | xargs markdown-link-check
        
    - name: Check documentation formatting
      run: |
        pip install markdownlint
        markdownlint docs/ README.md CONTRIBUTING.md
        
  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: cpp, python
        
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif' 